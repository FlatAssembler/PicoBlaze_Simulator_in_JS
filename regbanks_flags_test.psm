;This is a program I will run on
;actual PicoBlaze to test how
;flags behave when the regbank
;changes. Namely, it is possible,
;given what I know, that real
;PicoBlaze doesn't have separate
;flags for each regbank. In that
;case, this test will fail.

;Now follows some boilerplate code
;we use in our Computer Architecture
;classes...
CONSTANT LED_PORT,         00
CONSTANT HEX1_PORT,        01
CONSTANT HEX2_PORT,        02
CONSTANT UART_TX_PORT,     03
CONSTANT UART_RESET_PORT,  04
CONSTANT SW_PORT,          00
CONSTANT BTN_PORT,         01
CONSTANT UART_STATUS_PORT, 02
CONSTANT UART_RX_PORT,     03
; Tx data_present
CONSTANT U_TX_D, 00000001'b
; Tx FIFO half_full
CONSTANT U_TX_H, 00000010'b
; TxFIFO full
CONSTANT U_TX_F, 00000100'b
; Rxdata_present
CONSTANT U_RX_D, 00001000'b
; RxFIFO half_full
CONSTANT U_RX_H, 00010000'b
; RxFIFO full
CONSTANT U_RX_F, 00100000'b

address 0
load s9, "R"
call UART_TX
load s9, "u"
call UART_TX
load s9, "n"
call UART_TX
load s9, "n"
call UART_TX
load s9, "i"
call UART_TX
load s9, "n"
call UART_TX
load s9, "g"
call UART_TX
load s9, 20 ;Space
call UART_TX
load s9, "t"
call UART_TX
load s9, "h"
call UART_TX
load s9, "e"
call UART_TX
load s9, 20 ;Space
call UART_TX
load s9, "r"
call UART_TX
load s9, "e"
call UART_TX
load s9, "g"
call UART_TX
load s9, "b"
call UART_TX
load s9, "a"
call UART_TX
load s9, "n"
call UART_TX
load s9, "k"
call UART_TX
load s9, "s"
call UART_TX
load s9, "-"
call UART_TX
load s9, "f"
call UART_TX
load s9, "l"
call UART_TX
load s9, "a"
call UART_TX
load s9, "g"
call UART_TX
load s9, "s"
call UART_TX
load s9, 20 ;Space
call UART_TX
load s9, "t"
call UART_TX
load s9, "e"
call UART_TX
load s9, "s"
call UART_TX
load s9, "t"
call UART_TX
load s9, "."
call UART_TX
load s9, "."
call UART_TX
load s9, "."
call UART_TX
load s9, 20 ;Space
call UART_TX
;Now follows the core of the test...
regbank a
load s0, 0
sub  s0, 0
regbank b
load s0, 1
sub  s0, 0
regbank a
;Now, if flags on PicoBlaze work
;the way I think they do, the zero
;flag will be set.
jump z , success
jump nz, failure
;This point should not be reached...
load s9, "I"
call UART_TX
load s9, "n"
call UART_TX
load s9, "d"
call UART_TX
load s9, "e"
call UART_TX
load s9, "t"
call UART_TX
load s9, "e"
call UART_TX
load s9, "r"
call UART_TX
load s9, "m"
call UART_TX
load s9, "i"
call UART_TX
load s9, "n"
call UART_TX
load s9, "a"
call UART_TX
load s9, "t"
call UART_TX
load s9, "e"
call UART_TX
load s9, a ;New-line character.
call UART_TX
load   s0, ff
output s0, 0
jump infinite_loop
success:
load s9, "S"
call UART_TX
load s9, "u"
call UART_TX
load s9, "c"
call UART_TX
load s9, "c"
call UART_TX
load s9, "e"
call UART_TX
load s9, "s"
call UART_TX
load s9, "s"
call UART_TX
load s9, a ;New-line character.
call UART_TX
load   s0, aa
output s0, 0
jump infinite_loop
failure:
load s9, "F"
call UART_TX
load s9, "a"
call UART_TX
load s9, "i"
call UART_TX
load s9, "l"
call UART_TX
load s9, "u"
call UART_TX
load s9, "r"
call UART_TX
load s9, "e"
call UART_TX
load s9, a ;New-line character.
call UART_TX
load   s0, 55
output s0, 0
infinite_loop:
jump infinite_loop

;Once again, some boilerplate code
;we use in our Computer Architecture
;classes...
UART_RX:
  INPUT sA, UART_STATUS_PORT
  TEST  sA, U_RX_D
  JUMP  Z , UART_RX
  INPUT s9, UART_RX_PORT
RETURN

UART_TX:
  INPUT  sA, UART_STATUS_PORT
  TEST   sA, U_TX_F
  JUMP   NZ, UART_TX
  OUTPUT s9, UART_TX_PORT
RETURN
